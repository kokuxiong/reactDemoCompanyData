[{"E:\\companyERP\\src\\hooks\\useCommon.js":"1","E:\\companyERP\\src\\components\\Login.js":"2","E:\\companyERP\\src\\components\\MyApp.js":"3","E:\\companyERP\\src\\components\\NavBar.js":"4","E:\\companyERP\\src\\components\\List.js":"5","E:\\companyERP\\src\\components\\RegisterUpdate.js":"6","E:\\companyERP\\src\\index.js":"7","E:\\companyERP\\src\\components\\Infomation.js":"8","E:\\companyERP\\src\\services\\util.js":"9","E:\\companyERP\\src\\App.js":"10","E:\\companyERP\\src\\services\\empinfoDAO.js":"11","E:\\companyERP\\src\\services\\loginuserDAO.js":"12","E:\\companyERP\\src\\components\\LoginUserRegister.js":"13","E:\\companyERP\\src\\i18n.js":"14"},{"size":4471,"mtime":1608981957165,"results":"15","hashOfConfig":"16"},{"size":7141,"mtime":1609244289310,"results":"17","hashOfConfig":"16"},{"size":5997,"mtime":1609244887496,"results":"18","hashOfConfig":"16"},{"size":1272,"mtime":1609244470988,"results":"19","hashOfConfig":"16"},{"size":4814,"mtime":1609239897884,"results":"20","hashOfConfig":"16"},{"size":12564,"mtime":1609240330271,"results":"21","hashOfConfig":"16"},{"size":153,"mtime":1607760898854,"results":"22","hashOfConfig":"16"},{"size":3608,"mtime":1608890074345,"results":"23","hashOfConfig":"16"},{"size":943,"mtime":1608890053650,"results":"24","hashOfConfig":"16"},{"size":304,"mtime":1609244103545,"results":"25","hashOfConfig":"16"},{"size":1896,"mtime":1608890040041,"results":"26","hashOfConfig":"16"},{"size":2085,"mtime":1608890047156,"results":"27","hashOfConfig":"16"},{"size":7127,"mtime":1609245248749,"results":"28","hashOfConfig":"16"},{"size":811,"mtime":1609243369031,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"33"},"18360cf",{"filePath":"34","messages":"35","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\companyERP\\src\\hooks\\useCommon.js",["63","64"],"import {useEffect, useState} from 'react'\r\nimport {insertEmpinfo, findAllEmpinfo, findByCmpCd, updateEmpinfo, deleteByCmpCd } from '../services/empinfoDAO'\r\nimport { insertLoginuser, findByAccId } from '../services/loginuserDAO'\r\n\r\nexport default　function useCommon(opt){\r\n\r\n    //社員情報リスト\r\n    const [emplist, setEmplist] = useState([])\r\n\r\n    //初期化処理\r\n    useEffect(() => {\r\n        //すべての社員情報を検索する\r\n        if(opt != false){ //optがfalseの場合、社員情報検索しない、じゃないとuseCommonを呼び出すたびに検索処理が実行される\r\n            findAllEmpinfo((data) => {\r\n                //検索成功の場合、stateを更新\r\n                setEmplist(data)\r\n                //テスト用\r\n                console.log(data)\r\n            })\r\n        }\r\n    },[]) //一回のみ実行するため、第二パラメータに[]を渡す\r\n\r\n    //社員情報全量検索\r\n    function findAllEmp() {\r\n        findAllEmpinfo((data) => {\r\n            //検索成功の場合、stateを更新\r\n            setEmplist(data)\r\n        })\r\n    }\r\n\r\n    //社員情報新規登録\r\n    function insertEmp(obj, callback){\r\n        //実際の登録処理\r\n        insertEmpinfo(obj, ()=>{\r\n            //登録でき次第、すべてのレコードを再検索する\r\n            findAllEmpinfo((data) => {\r\n                //state更新\r\n                setEmplist(data)\r\n                //callback呼び出す\r\n                callback()\r\n            })\r\n        })\r\n    }\r\n\r\n    //社員cmpCdにより、社員情報を検索する\r\n    function findEmpByCmpCd(cmpCd, callback){\r\n        //実際の検索処理\r\n        findByCmpCd(cmpCd, (data)=>{\r\n            //検索結果をcallbackとして返却\r\n            callback(data)\r\n        })\r\n    }\r\n\r\n    //指定された社員情報（obj）を更新する \r\n    function updateEmp(obj, callback){\r\n        //実際の更新処理\r\n        updateEmpinfo(obj, ()=>{\r\n            //すべてのレコードを検索する\r\n            findAllEmpinfo((data) => {\r\n                //state更新\r\n                setEmplist(data)\r\n                //callback呼び出す\r\n                callback()\r\n            })\r\n        })\r\n    }\r\n\r\n    //指定された社員情報を削除する\r\n    function deleteEmp(obj){\r\n        //実際の削除処理\r\n        deleteByCmpCd(obj, ()=>{\r\n            //すべてのレコードを検索する\r\n            findAllEmpinfo((data) => {\r\n                //state更新\r\n                setEmplist(data)\r\n            })\r\n        })\r\n    }\r\n\r\n    //社員番号すでに存在してるかをチェックする\r\n    function doCheckDoubleEmp(cmpCd) {\r\n        return new Promise((resolve, reject) => {\r\n            console.log(\"doCheckDoubleEmp\")\r\n            //実際の検索処理\r\n            findByCmpCd(cmpCd, (data)=>{\r\n                console.log(\"data.name\" + data.name)\r\n                //検索結果返却\r\n                data.name ? resolve(true) : resolve(false)\r\n            })\r\n        })\r\n        \r\n    }\r\n\r\n    //ログインユーザのaccountIdにより、ログインユーザを検索する\r\n    //ログイン処理ユーザチェック用\r\n    function findLoginuserByAccId(accId, callback) {\r\n        findByAccId(accId, (data) => {\r\n            //検索結果をcallbackとして返却\r\n            callback(data)\r\n        })\r\n    }\r\n\r\n    //ログインユーザ新規登録処理\r\n    //insert loginuser\r\n    function loginUserRegister(obj, callback) {\r\n        insertLoginuser(obj,() => {\r\n            callback()\r\n        })\r\n    }\r\n    \r\n    return { \r\n        emplist,                  //社員情報リスト\r\n        setEmplist,               //社員情報リストをstateへ更新\r\n        findAllEmp,               //すべての社員情報を検索する\r\n        insertEmp,                //社員を新規登録する\r\n        findEmpByCmpCd,           //社員コードにより、社員情報を検索する\r\n        updateEmp,                //社員情報を更新する\r\n        deleteEmp,                //社員を削除する\r\n        doCheckDoubleEmp,         //新規登録したい社員コードが既に存在しているかをチェック処理\r\n        loginUserRegister,        //ログインユーザを新規登録したい\r\n        findLoginuserByAccId      //ログインユーザＩＤにより、ログインユーザを検索する \r\n    }\r\n}",["65","66"],"E:\\companyERP\\src\\components\\Login.js",["67","68","69","70","71","72"],"E:\\companyERP\\src\\components\\MyApp.js",["73","74","75","76","77"],"E:\\companyERP\\src\\components\\NavBar.js",["78"],"E:\\companyERP\\src\\components\\List.js",["79","80"],"E:\\companyERP\\src\\components\\RegisterUpdate.js",["81","82","83","84","85"],"import React, { useEffect, useState } from 'react'\r\nimport { useHistory, useParams } from \"react-router-dom\"\r\nimport { Button, Container, Form, FormGroup, Input, Label, Col } from 'reactstrap'\r\nimport useCommon from '../hooks/useCommon'\r\nimport { useForm, Controller } from 'react-hook-form'\r\n\r\n/** TODO\r\n *      名前:中国語、日本語、英語のみ使えます。\r\n *      性別:必須選択のこと エラーメッセージ出す\r\n *      国籍:必須選択のこと エラーメッセージ出す\r\n *      データベースの操作が失敗する場合は、画面に「ＳＱＬ実行例外が発生しました。」のメッセージを表示する。\r\n */\r\n\r\nexport default function RegisterUpdate(props){\r\n\r\n    //社員新規登録か、編集かフラグ\r\n    //true: insert , false: update\r\n    const [flag, setFlag] = useState(true)// default:新規\r\n    //社員コード\r\n    const [cmpCdInput, setCmpCdInput] = useState('')\r\n    //名前\r\n    const [name, setName] = useState('')\r\n    //性別\r\n    const [sexCd, setSexCd] = useState('01') //TODO check\r\n    //生年月日\r\n    const [birthday, setBirthday] = useState('')\r\n    //国籍\r\n    const [countryCd, setCountryCd] = useState('001') //TODO check\r\n    //hisitory\r\n    const history = useHistory()\r\n\r\n    //編集の場合、パスパラメータからcmpCdを取得\r\n    let params = useParams()\r\n    let cmpCd = params.cmpCd\r\n\r\n    //編集の場合の社員情報検索処理と新規登録の場合のＩＤ重複チェック処理\r\n    const { findEmpByCmpCd, doCheckDoubleEmp } = useCommon(false)\r\n\r\n    //\r\n    const { errors, handleSubmit, control, setValue } = useForm({\r\n        mode: \"onSubmit\",\r\n        defaultValues:{\r\n            cmpCd: '',\r\n            name: '',\r\n            birthday: '1990-10-01'\r\n        }\r\n    })\r\n\r\n    //初期化処理\r\n    useEffect(() => {\r\n        //編集の場合、当該社員情報を検索\r\n        if(cmpCd){\r\n            //フラグを編集にする\r\n            setFlag(false)\r\n            //当該社員情報を検索し、画面へ表示する\r\n            findEmpByCmpCd(cmpCd, (data) => {\r\n                setCmpCdInput(data.cmpCd)\r\n                setName(data.name)\r\n                setSexCd(data.sexCd)\r\n                setBirthday(data.birthday.slice(0, 10))\r\n                setCountryCd(data.countryCd)\r\n                setValue('cmpCd', data.cmpCd)\r\n                setValue('name', data.name)\r\n            })\r\n        }\r\n        \r\n    },[])\r\n\r\n    //画面で入力した社員コードを随時stateへ反映し、かつチェックする\r\n    function updateCmpCd(e){\r\n        console.log(\"update CmpCd \" + e.target.value)\r\n        setCmpCdInput(e.target.value) \r\n    }\r\n\r\n    //画面で入力した社員nameを随時stateへ反映\r\n    function updateName(e){\r\n        console.log(\"update name \" + e.target.value)\r\n        setName(e.target.value)\r\n    }\r\n\r\n    //画面で入力した社員sexを随時stateへ反映\r\n    function updateSexCd(e){\r\n        setSexCd(e.target.value)\r\n    }\r\n\r\n    //画面で入力した社員birthdayを随時stateへ反映\r\n    function updateBirthday(e){\r\n        setBirthday(e.target.value)\r\n    }\r\n\r\n    //画面で入力した社員国籍を随時stateへ反映\r\n    function updateCountryCd(e){\r\n        setCountryCd(e.target.value)\r\n    }\r\n\r\n    //更新or登録処理\r\n    function doUpdate(){\r\n        //register or update\r\n        let tempObj = {}\r\n        tempObj.cmpCd = cmpCdInput\r\n        tempObj.name = name\r\n        tempObj.sexCd = sexCd\r\n        tempObj.birthday = birthday\r\n        tempObj.countryCd = countryCd\r\n        console.log(name)\r\n        //画面で入力した内容が全部ＯＫの場合、処理を実行\r\n        if(cmpCdInput.length == 6 && name && sexCd && birthday && countryCd){\r\n            console.log(\"update called\")\r\n            //更新処理\r\n            if(cmpCd){\r\n                props.updateEmpinfo(tempObj, () => {\r\n                    console.log(\"update success\")\r\n                    history.push('/list') //更新成功⇒社員リスト画面へ遷移\r\n                })\r\n            }else{ //新規登録処理\r\n                doCheckDoubleEmp(cmpCdInput).then((result) => {\r\n                    if(!result){\r\n                        props.insertEmpinfo(tempObj, () => {\r\n                            history.push('/list') //登録成功⇒社員リスト画面へ遷移\r\n                        })\r\n                    }else{\r\n                        alert(\"既存ＩＤです\")\r\n                    }\r\n                })\r\n            }\r\n        }else{\r\n            alert(\"入力ミスある\")\r\n        }\r\n    }\r\n\r\n    return(\r\n        <div style={{paddingLeft:400,paddingRight:300}}>\r\n            <Container>\r\n                <h5>社員基本情報登録画面</h5><br/>\r\n                <Form onSubmit={handleSubmit(doUpdate)}>\r\n                    <FormGroup>\r\n                        <Label for=\"cmpCd\">社員番号</Label>\r\n                        {/* React Hook Form优先采用非受控组件和原生的输入组件，第三方受控组件需要使用controller\r\n                            controller的用法介绍请参照官网 */}\r\n                        <Controller \r\n                            control= {control} //使用useForm时必须，使用FormContext时可选\r\n                            name='cmpCd' //必须，输入组件唯一的名称\r\n                            rules={ //与register格式一致的校验规则\r\n                                {\r\n                                    required: true,\r\n                                    maxLength: 6,\r\n                                    minLength: 6,\r\n                                    validate: {\r\n                                        //可写同步校验，可写异步校验\r\n                                        asyncValidate: async value => { //返回true不触发error，返回false触发error\r\n                                            if(cmpCd){ //更改时一律不触发该错误\r\n                                                return true\r\n                                            }else{\r\n                                                let result = await doCheckDoubleEmp(value)\r\n                                                return result === false\r\n                                            }\r\n                                            \r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            //返回React元素并将事件和值附加到组件中的函数\r\n                            //这很容易与带有非标准属性名称的外部受控组件集成，为子组件提供onChange，onBlur和value属性\r\n                            //注意 下个版本弃用as了，所以尽量用render不要用as\r\n                            render={(props) => (\r\n                                <Input onChange={　\r\n                                    (value) => {\r\n                                        props.onChange(value)\r\n                                        updateCmpCd(value) //自定义onChange事件的写法\r\n                                    }\r\n                                }\r\n                                value={props.value}\r\n                                placeholder=\"６桁英数字を入力してください\" \r\n                                disabled={flag ? false : true}\r\n                                type='text'\r\n                                id='cmpCd'\r\n                                name='cmpCd'\r\n                            />)\r\n                            }\r\n                        />\r\n                        {errors.cmpCd?.type === \"required\" && <span style={{color:\"red\"}}>必須入力です。</span>}\r\n                        {errors.cmpCd?.type === \"maxLength\" && <span style={{color:\"red\"}}>６桁英数字を入力してください。</span>}\r\n                        {errors.cmpCd?.type === \"minLength\" && <span style={{color:\"red\"}}>６桁英数字を入力してください。</span>}\r\n                        {errors.cmpCd?.type === \"asyncValidate\" && <span style={{color:\"red\"}}>既存社員ＩＤです。</span>}\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"name\">名前</Label>\r\n                        <Controller \r\n                            control= {control}\r\n                            name='name'\r\n                            rules={{ required: true }}\r\n                            render={(props) => (\r\n                                <Input onChange={\r\n                                    (value) => {\r\n                                        props.onChange(value)\r\n                                        updateName(value)\r\n                                    }\r\n                                }\r\n                                value={props.value}\r\n                                placeholder=\"名前を入力してください\" \r\n                                name='name'\r\n                                type='text'\r\n                                id='name'\r\n                            />)\r\n                            }\r\n                        />\r\n                        {errors.name?.type === \"required\" && <span style={{color:\"red\"}}>必須入力です。</span>}\r\n                    </FormGroup>\r\n                    <FormGroup check row>\r\n                        {/* <Label for=\"\">性別</Label> */}\r\n                        <legend className=\"col-form-label\">性別</legend>\r\n                        <FormGroup check inline>\r\n                            <Label check for=\"sexCd1\">\r\n                                <Input type=\"radio\" name=\"sexCd\" value=\"01\" id=\"sexCd1\" \r\n                                    onChange={updateSexCd} checked={sexCd == '01'} />男\r\n                            </Label>\r\n                        </FormGroup>\r\n                        <FormGroup check inline>\r\n                            <Label check for=\"sexCd2\">\r\n                                <Input type=\"radio\" name=\"sexCd\" value=\"02\" id=\"sexCd2\" \r\n                                    onChange={updateSexCd} checked={sexCd == '02'} />女\r\n                            </Label>\r\n                        </FormGroup>\r\n                    </FormGroup>\r\n                    <br/>\r\n                    <FormGroup>\r\n                        <Label for=\"birthday\">生年月日</Label>\r\n                        {/* <Input type=\"date\" name=\"birthday\" id=\"birthday\" value={birthday} \r\n                            onChange={updateBirthday} /> */}\r\n                        <Controller \r\n                            control= {control}\r\n                            name='birthday'\r\n                            rules={{ required: true }}\r\n                            render={(props) => (\r\n                                <Input onChange={\r\n                                    (value) => {\r\n                                        props.onChange(value)\r\n                                        updateBirthday(value)\r\n                                    }\r\n                                }\r\n                                value={props.value}\r\n                                name='birthday'\r\n                                type='date'\r\n                                id='birthday'\r\n                            />)\r\n                            }\r\n                        />\r\n                        {errors.birthday?.type === \"required\" && <span style={{color:\"red\"}}>必須入力です。</span>}\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"countryCd\">国籍</Label>\r\n                        <Input type=\"select\" name=\"countryCd\" id=\"countryCd\" value={countryCd} onChange={updateCountryCd}>\r\n                            <option value=\"001\">中国</option>\r\n                            <option value=\"002\">日本</option>\r\n                            <option value=\"003\">韓国</option>\r\n                        </Input>\r\n                    </FormGroup>\r\n                    <br/>\r\n                    <FormGroup>\r\n                        {/* <Button color=\"primary\" onClick={doUpdate}>確定</Button> */}\r\n                        <Button color=\"primary\" type=\"submit\">確定</Button>\r\n                        <Button color=\"secondary\" onClick={() => history.push('/list')} >戻る</Button>\r\n                    </FormGroup>\r\n                </Form>\r\n            </Container>\r\n        </div>\r\n    )\r\n\r\n}",["86","87"],"E:\\companyERP\\src\\index.js",[],["88","89"],"E:\\companyERP\\src\\components\\Infomation.js",["90","91","92"],"E:\\companyERP\\src\\services\\util.js",["93"],"E:\\companyERP\\src\\App.js",[],"E:\\companyERP\\src\\services\\empinfoDAO.js",[],"E:\\companyERP\\src\\services\\loginuserDAO.js",[],"E:\\companyERP\\src\\components\\LoginUserRegister.js",["94","95","96"],"E:\\companyERP\\src\\i18n.js",[],{"ruleId":"97","severity":1,"message":"98","line":13,"column":16,"nodeType":"99","messageId":"100","endLine":13,"endColumn":18},{"ruleId":"101","severity":1,"message":"102","line":21,"column":7,"nodeType":"103","endLine":21,"endColumn":9,"suggestions":"104"},{"ruleId":"105","replacedBy":"106"},{"ruleId":"107","replacedBy":"108"},{"ruleId":"109","severity":1,"message":"110","line":7,"column":26,"nodeType":"111","messageId":"112","endLine":7,"endColumn":41},{"ruleId":"109","severity":1,"message":"113","line":7,"column":43,"nodeType":"111","messageId":"112","endLine":7,"endColumn":48},{"ruleId":"109","severity":1,"message":"114","line":29,"column":16,"nodeType":"111","messageId":"112","endLine":29,"endColumn":20},{"ruleId":"97","severity":1,"message":"115","line":71,"column":39,"nodeType":"99","messageId":"100","endLine":71,"endColumn":41},{"ruleId":"97","severity":1,"message":"115","line":98,"column":43,"nodeType":"99","messageId":"100","endLine":98,"endColumn":45},{"ruleId":"97","severity":1,"message":"115","line":99,"column":46,"nodeType":"99","messageId":"100","endLine":99,"endColumn":48},{"ruleId":"109","severity":1,"message":"114","line":20,"column":16,"nodeType":"111","messageId":"112","endLine":20,"endColumn":20},{"ruleId":"97","severity":1,"message":"115","line":75,"column":22,"nodeType":"99","messageId":"100","endLine":75,"endColumn":24},{"ruleId":"97","severity":1,"message":"115","line":77,"column":25,"nodeType":"99","messageId":"100","endLine":77,"endColumn":27},{"ruleId":"97","severity":1,"message":"115","line":84,"column":22,"nodeType":"99","messageId":"100","endLine":84,"endColumn":24},{"ruleId":"97","severity":1,"message":"115","line":86,"column":25,"nodeType":"99","messageId":"100","endLine":86,"endColumn":27},{"ruleId":"109","severity":1,"message":"116","line":6,"column":13,"nodeType":"111","messageId":"112","endLine":6,"endColumn":14},{"ruleId":"109","severity":1,"message":"117","line":2,"column":94,"nodeType":"111","messageId":"112","endLine":2,"endColumn":99},{"ruleId":"97","severity":1,"message":"115","line":52,"column":36,"nodeType":"99","messageId":"100","endLine":52,"endColumn":38},{"ruleId":"109","severity":1,"message":"118","line":3,"column":60,"nodeType":"111","messageId":"112","endLine":3,"endColumn":63},{"ruleId":"101","severity":1,"message":"119","line":67,"column":7,"nodeType":"103","endLine":67,"endColumn":9,"suggestions":"120"},{"ruleId":"97","severity":1,"message":"115","line":107,"column":30,"nodeType":"99","messageId":"100","endLine":107,"endColumn":32},{"ruleId":"97","severity":1,"message":"115","line":215,"column":75,"nodeType":"99","messageId":"100","endLine":215,"endColumn":77},{"ruleId":"97","severity":1,"message":"115","line":221,"column":75,"nodeType":"99","messageId":"100","endLine":221,"endColumn":77},{"ruleId":"105","replacedBy":"121"},{"ruleId":"107","replacedBy":"122"},{"ruleId":"105","replacedBy":"123"},{"ruleId":"107","replacedBy":"124"},{"ruleId":"109","severity":1,"message":"125","line":3,"column":65,"nodeType":"111","messageId":"112","endLine":3,"endColumn":68},{"ruleId":"101","severity":1,"message":"126","line":34,"column":7,"nodeType":"103","endLine":34,"endColumn":9,"suggestions":"127"},{"ruleId":"97","severity":1,"message":"115","line":56,"column":72,"nodeType":"99","messageId":"100","endLine":56,"endColumn":74},{"ruleId":"97","severity":1,"message":"115","line":11,"column":59,"nodeType":"99","messageId":"100","endLine":11,"endColumn":61},{"ruleId":"109","severity":1,"message":"114","line":25,"column":16,"nodeType":"111","messageId":"112","endLine":25,"endColumn":20},{"ruleId":"97","severity":1,"message":"115","line":80,"column":31,"nodeType":"99","messageId":"100","endLine":80,"endColumn":33},{"ruleId":"97","severity":1,"message":"115","line":96,"column":33,"nodeType":"99","messageId":"100","endLine":96,"endColumn":35},"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'opt'. Either include it or remove the dependency array.","ArrayExpression",["128"],"no-native-reassign",["129"],"no-negated-in-lhs",["130"],"no-unused-vars","'withTranslation' is defined but never used.","Identifier","unusedVar","'Trans' is defined but never used.","'i18n' is assigned a value but never used.","Expected '===' and instead saw '=='.","'t' is assigned a value but never used.","'Badge' is defined but never used.","'Col' is defined but never used.","React Hook useEffect has missing dependencies: 'cmpCd', 'findEmpByCmpCd', and 'setValue'. Either include them or remove the dependency array.",["131"],["129"],["130"],["129"],["130"],"'Row' is defined but never used.","React Hook useEffect has missing dependencies: 'cmpCd' and 'findEmpByCmpCd'. Either include them or remove the dependency array.",["132"],{"desc":"133","fix":"134"},"no-global-assign","no-unsafe-negation",{"desc":"135","fix":"136"},{"desc":"137","fix":"138"},"Update the dependencies array to be: [opt]",{"range":"139","text":"140"},"Update the dependencies array to be: [cmpCd, findEmpByCmpCd, setValue]",{"range":"141","text":"142"},"Update the dependencies array to be: [cmpCd, findEmpByCmpCd]",{"range":"143","text":"144"},[688,690],"[opt]",[2015,2017],"[cmpCd, findEmpByCmpCd, setValue]",[1200,1202],"[cmpCd, findEmpByCmpCd]"]