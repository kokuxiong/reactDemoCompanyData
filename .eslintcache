[{"E:\\companyERP\\src\\hooks\\useCommon.js":"1","E:\\companyERP\\src\\components\\Login.js":"2","E:\\companyERP\\src\\components\\MyApp.js":"3","E:\\companyERP\\src\\components\\NavBar.js":"4","E:\\companyERP\\src\\components\\List.js":"5","E:\\companyERP\\src\\components\\RegisterUpdate.js":"6","E:\\companyERP\\src\\index.js":"7","E:\\companyERP\\src\\components\\Infomation.js":"8","E:\\companyERP\\src\\services\\util.js":"9","E:\\companyERP\\src\\App.js":"10","E:\\companyERP\\src\\services\\empinfoDAO.js":"11","E:\\companyERP\\src\\services\\loginuserDAO.js":"12","E:\\companyERP\\src\\components\\LoginUserRegister.js":"13"},{"size":4471,"mtime":1608981957165,"results":"14","hashOfConfig":"15"},{"size":7129,"mtime":1609050403616,"results":"16","hashOfConfig":"15"},{"size":5049,"mtime":1608890080405,"results":"17","hashOfConfig":"15"},{"size":1749,"mtime":1608874564303,"results":"18","hashOfConfig":"15"},{"size":4777,"mtime":1608987416220,"results":"19","hashOfConfig":"15"},{"size":12559,"mtime":1609042904743,"results":"20","hashOfConfig":"15"},{"size":153,"mtime":1607760898854,"results":"21","hashOfConfig":"15"},{"size":3607,"mtime":1608874705264,"results":"22","hashOfConfig":"15"},{"size":942,"mtime":1608877711923,"results":"23","hashOfConfig":"15"},{"size":162,"mtime":1608805503364,"results":"24","hashOfConfig":"15"},{"size":1895,"mtime":1608877814219,"results":"25","hashOfConfig":"15"},{"size":2084,"mtime":1608877767159,"results":"26","hashOfConfig":"15"},{"size":7179,"mtime":1608987330473,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"18360cf",{"filePath":"30","messages":"31","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"32","messages":"33","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"41"},"E:\\companyERP\\src\\hooks\\useCommon.js",["61","62"],"E:\\companyERP\\src\\components\\Login.js",["63","64","65","66","67","68","69","70","71"],"E:\\companyERP\\src\\components\\MyApp.js",["72","73","74","75"],"import React,{useState} from 'react'\r\nimport {BrowserRouter as Router, Switch, Route, Redirect} from 'react-router-dom'\r\nimport NavBar from './NavBar'\r\nimport List from './List'\r\nimport Infomation from './Infomation'\r\nimport RegisterUpdate from './RegisterUpdate'\r\nimport Login from './Login'\r\nimport useCommon from '../hooks/useCommon'\r\nimport LoginUserRegister from './LoginUserRegister'\r\nimport Background from '../assets/image/background.jpg';\r\n\r\nexport default function MyApp(){\r\n\r\n    //ログインステータスＳｔａｔｅ\r\n    const [login, setLogin] = useState(false)\r\n    //navbarで「登録」、「ログインへ」を表示する制御\r\n    const [navbarpath, setNavbarpath] = useState('login') \r\n    //社員情報関連\r\n    const { emplist, setEmplist, findAllEmp, insertEmp, updateEmp, deleteEmp } = useCommon()\r\n\r\n    //ログイン処理\r\n    //opt: true->ログイン成功 false->ログイン失敗\r\n    function doLogin(opt, callback){\r\n        //ログイン状況をＳｔａｔｅへ反映\r\n        setLogin(opt)\r\n        //ログイン成功、かつcallback関数ある場合、callback関数をよびだす。\r\n        if(opt && callback){\r\n            callback()\r\n        }\r\n    }\r\n\r\n    //社員新規登録\r\n    function insertEmpinfo(obj, callback) {\r\n        insertEmp(obj, () => {\r\n            callback()\r\n        })\r\n    }\r\n\r\n    //社員更新\r\n    function updateEmpinfo(obj, callback) {\r\n        updateEmp(obj, () => {\r\n            callback()\r\n        })\r\n    }\r\n\r\n    //社員削除処理\r\n    function deleteEmpinfo(obj) {\r\n        // console.log(\"deleteEmpinfo\")\r\n        deleteEmp(obj)\r\n    }\r\n\r\n    //検索バーで入力内容により、検索処理\r\n    function doSearch(para) {\r\n        // console.log(para)\r\n        //未入力の場合、全量検索\r\n        if(!para){\r\n            findAllEmp()\r\n        }else{\r\n            //入力内容により、フィルタ処理　※ＤＢは検索しない\r\n            let targetList = emplist.filter(element => element.name.indexOf(para) > -1)\r\n            //フィルタ結果をstateへ更新し、子コンポをre-renderさせる\r\n            setEmplist(targetList)\r\n        }\r\n    }\r\n\r\n    //-----------------------------------------------------------------\r\n    //全画面でenterキーを使えないようにする(copy internet)\r\n    document.onkeydown = function(event) {  \r\n        var target, code, tag;  \r\n        if (!event) {  \r\n            event = window.event; //针对ie浏览器  \r\n            target = event.srcElement;  \r\n            code = event.keyCode;  \r\n            if (code == 13) {  \r\n                tag = target.tagName;  \r\n                if (tag == \"TEXTAREA\") { return true; }  \r\n                else { return false; }  \r\n            }  \r\n        }  \r\n        else {  \r\n            target = event.target; //针对遵循w3c标准的浏览器，如Firefox  \r\n            code = event.keyCode;  \r\n            if (code == 13) {  \r\n                tag = target.tagName;  \r\n                if (tag == \"INPUT\") { return false; }  \r\n                else { return true; }   \r\n            }  \r\n        }  \r\n    };\r\n    //-----------------------------------------------------------------\r\n    //-----------------------------------------------------------------\r\n\r\n    return(\r\n        <div style={{ backgroundImage: `url(${Background})`, height:550 }}>\r\n            <NavBar doLogin={doLogin} login={login} navbarpath={navbarpath}/>\r\n            <Router>\r\n                <div>\r\n                    <Switch>\r\n                            <Route exact path=\"/\"><Login setNavbarpath={setNavbarpath} doLogin={doLogin}/></Route>\r\n                            <Route exact path=\"/loginuserRegister\"><LoginUserRegister setNavbarpath={setNavbarpath}/></Route>\r\n                            <Route path=\"/list\">\r\n                                {login ? <List doSearch={doSearch} emplist={emplist} deleteEmpinfo={deleteEmpinfo}/> : (\r\n                                    <Redirect to={{\r\n                                        pathname: \"/\"\r\n                                    }} /> \r\n                                )} \r\n                            </Route>\r\n                            <Route path=\"/infomation/:cmpCd\">\r\n                                {login ? <Infomation/> : (\r\n                                    <Redirect to={{\r\n                                        pathname: \"/\"\r\n                                    }} /> \r\n                                )}\r\n                            </Route>\r\n                            <Route path=\"/registerUpdate/:cmpCd?\">\r\n                                {login ? <RegisterUpdate insertEmpinfo={insertEmpinfo} updateEmpinfo={updateEmpinfo}/> : (\r\n                                    <Redirect to={{\r\n                                        pathname: \"/\"\r\n                                    }} /> \r\n                                )}\r\n                            </Route>\r\n                    </Switch>\r\n                </div>\r\n            </Router>\r\n        </div>\r\n    )\r\n\r\n}",["76","77"],"E:\\companyERP\\src\\components\\NavBar.js",["78","79"],"E:\\companyERP\\src\\components\\List.js",["80","81"],"import React, { useState } from 'react'\r\nimport { Button, ButtonGroup, Container, Table, NavLink, Form, FormGroup, Input, Label, Col, Badge  } from 'reactstrap'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { getCountryName } from '../services/util'\r\n\r\n/** TODO\r\n *      社員情報削除確認画面に遷移する　※社員情報削除確認画面基本設計がない？\r\n *      「メニュー画面」ボタン　※画面にない？\r\n */\r\n\r\nexport default function List(props){\r\n\r\n    //検索バーで入力した内容\r\n    const [target, setTarget] = useState('')\r\n    //historyを利用し、画面遷移する\r\n    const history = useHistory()\r\n    //すべての社員情報をpropsから取得\r\n    let empinfos = props.emplist\r\n\r\n    //検索バーで入力した内容を随時stateへ更新\r\n    function updateTarget(e) { \r\n        setTarget(e.target.value)\r\n        //入力した内容を削除したら、すべての社員情報を表示する\r\n        if(!e.target.value){\r\n            props.doSearch('')\r\n        }else{\r\n            //特にしません。\r\n        }\r\n\r\n    }\r\n    //検索バーの入力内容をクリアする\r\n    function doClear() {\r\n        setTarget('') //stateをクリア\r\n        props.doSearch('') //全量検索\r\n    }\r\n    //社員削除する処理\r\n    function doDelete(empinfo) {\r\n        //本当に削除するかをユーザへ確認する\r\n        let result = window.confirm(`本当に社員「${empinfo.name}」を削除してよろしいでしょうか`)\r\n        //はいを押下する場合、削除を実行、それ以外は削除しません。\r\n        if(result){\r\n            props.deleteEmpinfo(empinfo)\r\n        }\r\n    }\r\n\r\n    //画面表示用　社員テーブル\r\n    const empinfoList = empinfos.map(empinfo => {\r\n        return  (\r\n            <tr key={empinfo.cmpCd}>\r\n                <td>{empinfo.cmpCd}</td>\r\n                <td><NavLink onClick={() => history.push('/infomation/' + empinfo.cmpCd)} style={{padding:0}}>{empinfo.name}</NavLink></td>\r\n                <td>{empinfo.sexCd == '01' ? '男' : '女'}</td>\r\n                <td>{empinfo.birthday.slice(0, 10)}</td>\r\n                <td>{getCountryName(empinfo.countryCd)}</td>\r\n                <td>\r\n                    <ButtonGroup>\r\n                        <Button size=\"sm\" color=\"primary\" onClick={() => history.push('/registerUpdate/' + empinfo.cmpCd)} >編集</Button>\r\n                        <Button size=\"sm\" color=\"danger\" onClick={() => doDelete(empinfo)}>削除</Button>\r\n                        {/* <Button size=\"sm\" color=\"danger\" onClick={() => history.push('/delete/' + empinfo.cmpCd)}>削除</Button> */}\r\n                    </ButtonGroup>\r\n                </td>\r\n            </tr>\r\n        )\r\n    })\r\n\r\n    return (\r\n            <div>\r\n                <Container className=\"themed-container\" fluid>\r\n                    <div className=\"float-right\">\r\n                        <Button color=\"success\" onClick={() => history.push('/registerUpdate/')}>新規社員登録</Button>\r\n                    </div>\r\n                    <h3>社員基本情報一覧画面</h3><br/><br/>\r\n                    <Form>\r\n                        <FormGroup row>\r\n                            <Label for=\"cmpSearch\" sm={2}>社員検索</Label>\r\n                            <Col sm={4}>\r\n                            <Input type=\"text\" name=\"cmpSearch\" id=\"cmpSearch\" value={target} onChange={updateTarget}\r\n                                placeholder=\"名前を入力してください\"/>\r\n                            </Col>\r\n                            <Button color=\"primary\" sm={2} onClick={() => {props.doSearch(target)}} disabled={target.length > 0 ? false : true}>検索</Button>\r\n                            <Button color=\"secondary\" sm={2} onClick={doClear} disabled={target.length > 0 ? false : true}>クリア</Button>\r\n                        </FormGroup>\r\n                    </Form>\r\n                    {/* <Table striped className=\"mt-4\"> */}\r\n                    <Table dark className=\"mt-4\">\r\n                        <thead>\r\n                            <tr>\r\n                                <th width=\"10%\">社員番号</th>\r\n                                <th width=\"10%\">名前</th>\r\n                                <th width=\"10%\">性別</th>\r\n                                <th width=\"10%\">生年月日</th>\r\n                                <th width=\"10%\">国籍</th>\r\n                                <th width=\"10%\">操作</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {empinfoList}\r\n                        </tbody>\r\n                    </Table>\r\n                </Container>\r\n            </div>\r\n    )\r\n}",["82","83"],"E:\\companyERP\\src\\components\\RegisterUpdate.js",["84","85","86","87"],"E:\\companyERP\\src\\index.js",[],["88","89"],"E:\\companyERP\\src\\components\\Infomation.js",["90","91","92"],"E:\\companyERP\\src\\services\\util.js",["93"],"E:\\companyERP\\src\\App.js",[],["94","95"],"E:\\companyERP\\src\\services\\empinfoDAO.js",[],"E:\\companyERP\\src\\services\\loginuserDAO.js",[],"E:\\companyERP\\src\\components\\LoginUserRegister.js",["96","97","98"],"import { useEffect, useState } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { Button, Container, Form, FormGroup, Input, Label, Col, Alert } from 'reactstrap'\r\nimport useCommon from '../hooks/useCommon'\r\nimport { doCheck6LetterOrNum } from '../services/util'\r\n\r\nexport default function LoginUserRegister(props){\r\n\r\n    //historyを利用し画面遷移する\r\n    let history = useHistory()\r\n    //画面で入力したＩＤとパスワードstate\r\n    const [accountId, setAccountId] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    //画面へエラーメッセージを出すフラグ\r\n    const [visible, setVisible] = useState(false) //ＩＤ必須入力フラグ\r\n    const [visible2, setVisible2] = useState(false) //パスワードに不正ありフラグ\r\n    const [visible2sub, setVisible2sub] = useState(false) //パスワードは未入力かor６桁英数字以外かフラグ\r\n    const [visible3, setVisible3] = useState(false) //ＩＤ存在フラグ\r\n    const [visible4, setVisible4] = useState(false) //登録成功、画面遷移提示フラグ\r\n    const [time3, setTime3] = useState(3) //登録成功の場合、3秒後画面をログインへ遷移する\r\n    //ログインユーザ登録処理と検索処理\r\n    const { loginUserRegister, findLoginuserByAccId } = useCommon(false)\r\n\r\n    //navbarで「ログインへ」を表示する\r\n    // props.setNavbarpath('register')\r\n    useEffect(() => {\r\n        props.setNavbarpath('register')\r\n    },[])\r\n\r\n    //画面で入力したＩＤを随時stateへ\r\n    function updateAccountId(e){\r\n        setAccountId(e.target.value)\r\n        //ＩＤを弄ると、エラーメッセージを消す\r\n        if(visible){\r\n            setVisible(false)\r\n            setVisible2sub(false)\r\n        }\r\n        //ＩＤを弄ると、エラーメッセージを消す\r\n        if(visible3){\r\n            setVisible3(false)\r\n        }\r\n    }\r\n    //画面で入力したパスワードを随時stateへ\r\n    function updatePassword(e){\r\n        setPassword(e.target.value)\r\n        //パスワードを弄ると、エラーメッセージを消す\r\n        if(visible2){\r\n            setVisible2(false)\r\n            setVisible2sub(false)\r\n        }\r\n        //パスワードを弄ると、エラーメッセージを消す\r\n        if(visible3){\r\n            setVisible3(false)\r\n        }\r\n    }\r\n\r\n    //登録処理\r\n    function doRegister(){\r\n        //ＩＤ未入力の場合、エラーメッセージ出す\r\n        if(!accountId){\r\n            // alert(\"accountID must be inputed\")\r\n            setVisible(true)\r\n        }\r\n        //パスワード未入力の場合、エラーメッセージ出す\r\n        if(!password){\r\n            // alert(\"password must be inputed\")\r\n            setVisible2(true)\r\n        }\r\n        //どちらか未入力の場合、なにもしない\r\n        if(!accountId || !password){\r\n            // alert('未入力項目がありますので、ご確認ください。')\r\n            return\r\n        }\r\n        //パスワード６桁英数字チェック、６桁英数字以外の場合、エラーメッセージ出す\r\n        if(!doCheck6LetterOrNum(password)){\r\n            setVisible2(true)\r\n            setVisible2sub(true)\r\n            return\r\n        }\r\n        //ＩＤが重複してるかチェック\r\n        findLoginuserByAccId(accountId, (data) => {\r\n            //ＩＤが重複したら、エラーメッセージ出す\r\n            if(data.accountId == accountId){\r\n                // alert(\"double user\")\r\n                setVisible3(true)\r\n            }else{\r\n                //重複してないなら、登録する\r\n                let tempObj = {}\r\n                tempObj.accountId = accountId\r\n                tempObj.password = password\r\n                loginUserRegister(tempObj, () => {\r\n                    // history.push('/')\r\n                    // alert(\"登録成功です。３秒後ログイン画面へ自動遷移いたします。\")\r\n                    //３秒後遷移するよ　をユーザへ提示するメッセージ出す\r\n                    setVisible4(true)\r\n                    let time = 3\r\n                    let timeCount3 = setInterval(() => {\r\n                        setTime3(time--)\r\n                        if(time == 0){\r\n                            setTimeout(() => {\r\n                                history.push('/')\r\n                                clearInterval(timeCount3)\r\n                            }, 1000);\r\n                        }\r\n                    }, 1000);\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    return(\r\n    <div style={{textAlign:'center'}}>\r\n        <Container>\r\n            <h5 style={{paddingLeft:'auto',paddingRight:270}}>ログインユーザ登録画面</h5><br/><br/>\r\n            <Form >\r\n                <FormGroup row style={{justifyContent: 'center'}}>\r\n                    <Label for=\"username\" sm={2}>ユーザＩＤ</Label>\r\n                    <Col sm={4}>\r\n                        <Input type=\"text\" name=\"username\" id=\"username\" \r\n                            onChange={updateAccountId} placeholder=\"ログインユーザＩＤ\"/>\r\n                    </Col>\r\n                    <Col sm={4}>\r\n                        <Alert color=\"danger\" isOpen={visible} style={{height:38,paddingTop:5,paddingBottom:0,marginBottom:0}}>\r\n                            必須入力です。\r\n                        </Alert>\r\n                    </Col>\r\n                </FormGroup>\r\n                <FormGroup row style={{justifyContent: 'center'}}>\r\n                    <Label for=\"password\" sm={2}>パスワード</Label>\r\n                    <Col sm={4}>\r\n                        <Input type=\"password\" name=\"password\" id=\"password\" \r\n                            onChange={updatePassword} placeholder=\"パスワード\"/>\r\n                    </Col>\r\n                    <Col sm={4}>\r\n                        <Alert color=\"danger\" isOpen={visible2} style={{height:38,paddingTop:5,paddingBottom:0,marginBottom:0}}>\r\n                            {visible2sub ? '６桁英数字を入力してください。' : '必須入力です。'}\r\n                        </Alert>\r\n                    </Col>\r\n                </FormGroup> \r\n                <FormGroup row style={{justifyContent: 'center'}}>\r\n                    <Col sm={6}>\r\n                        <Alert color=\"danger\" isOpen={visible3} style={{width:350}}>\r\n                            ユーザＩＤは既に存在しています。\r\n                        </Alert>\r\n                        <Alert color=\"danger\" isOpen={visible4} style={{width:350}}>\r\n                            {`新規登録成功、あと${time3}秒でログイン画面へ自動遷移します。`}\r\n                        </Alert>\r\n                    </Col>\r\n                </FormGroup> \r\n                <br/>\r\n                <FormGroup style={{justifyContent: 'center'}}>\r\n                    <Col sm={10}><Button color=\"primary\" onClick={doRegister} >登録</Button></Col>\r\n                </FormGroup>\r\n            </Form>\r\n        </Container>\r\n    </div>\r\n    )\r\n\r\n}",{"ruleId":"99","severity":1,"message":"100","line":13,"column":16,"nodeType":"101","messageId":"102","endLine":13,"endColumn":18},{"ruleId":"103","severity":1,"message":"104","line":21,"column":7,"nodeType":"105","endLine":21,"endColumn":9,"suggestions":"106"},{"ruleId":"107","severity":1,"message":"108","line":3,"column":18,"nodeType":"109","messageId":"110","endLine":3,"endColumn":27},{"ruleId":"107","severity":1,"message":"111","line":3,"column":40,"nodeType":"109","messageId":"110","endLine":3,"endColumn":45},{"ruleId":"107","severity":1,"message":"112","line":5,"column":27,"nodeType":"109","messageId":"110","endLine":5,"endColumn":34},{"ruleId":"107","severity":1,"message":"113","line":5,"column":36,"nodeType":"109","messageId":"110","endLine":5,"endColumn":43},{"ruleId":"107","severity":1,"message":"114","line":5,"column":45,"nodeType":"109","messageId":"110","endLine":5,"endColumn":55},{"ruleId":"103","severity":1,"message":"115","line":31,"column":7,"nodeType":"105","endLine":31,"endColumn":9,"suggestions":"116"},{"ruleId":"99","severity":1,"message":"117","line":73,"column":39,"nodeType":"101","messageId":"102","endLine":73,"endColumn":41},{"ruleId":"99","severity":1,"message":"117","line":100,"column":43,"nodeType":"101","messageId":"102","endLine":100,"endColumn":45},{"ruleId":"99","severity":1,"message":"117","line":101,"column":46,"nodeType":"101","messageId":"102","endLine":101,"endColumn":48},{"ruleId":"99","severity":1,"message":"117","line":74,"column":22,"nodeType":"101","messageId":"102","endLine":74,"endColumn":24},{"ruleId":"99","severity":1,"message":"117","line":76,"column":25,"nodeType":"101","messageId":"102","endLine":76,"endColumn":27},{"ruleId":"99","severity":1,"message":"117","line":83,"column":22,"nodeType":"101","messageId":"102","endLine":83,"endColumn":24},{"ruleId":"99","severity":1,"message":"117","line":85,"column":25,"nodeType":"101","messageId":"102","endLine":85,"endColumn":27},{"ruleId":"118","replacedBy":"119"},{"ruleId":"120","replacedBy":"121"},{"ruleId":"99","severity":1,"message":"117","line":21,"column":41,"nodeType":"101","messageId":"102","endLine":21,"endColumn":43},{"ruleId":"99","severity":1,"message":"117","line":30,"column":41,"nodeType":"101","messageId":"102","endLine":30,"endColumn":43},{"ruleId":"107","severity":1,"message":"122","line":2,"column":94,"nodeType":"109","messageId":"110","endLine":2,"endColumn":99},{"ruleId":"99","severity":1,"message":"117","line":52,"column":36,"nodeType":"101","messageId":"102","endLine":52,"endColumn":38},{"ruleId":"118","replacedBy":"123"},{"ruleId":"120","replacedBy":"124"},{"ruleId":"103","severity":1,"message":"125","line":67,"column":7,"nodeType":"105","endLine":67,"endColumn":9,"suggestions":"126"},{"ruleId":"99","severity":1,"message":"117","line":107,"column":30,"nodeType":"101","messageId":"102","endLine":107,"endColumn":32},{"ruleId":"99","severity":1,"message":"117","line":215,"column":75,"nodeType":"101","messageId":"102","endLine":215,"endColumn":77},{"ruleId":"99","severity":1,"message":"117","line":221,"column":75,"nodeType":"101","messageId":"102","endLine":221,"endColumn":77},{"ruleId":"118","replacedBy":"127"},{"ruleId":"120","replacedBy":"128"},{"ruleId":"107","severity":1,"message":"129","line":3,"column":65,"nodeType":"109","messageId":"110","endLine":3,"endColumn":68},{"ruleId":"103","severity":1,"message":"130","line":34,"column":7,"nodeType":"105","endLine":34,"endColumn":9,"suggestions":"131"},{"ruleId":"99","severity":1,"message":"117","line":56,"column":72,"nodeType":"101","messageId":"102","endLine":56,"endColumn":74},{"ruleId":"99","severity":1,"message":"117","line":11,"column":59,"nodeType":"101","messageId":"102","endLine":11,"endColumn":61},{"ruleId":"118","replacedBy":"132"},{"ruleId":"120","replacedBy":"133"},{"ruleId":"103","severity":1,"message":"115","line":28,"column":7,"nodeType":"105","endLine":28,"endColumn":9,"suggestions":"134"},{"ruleId":"99","severity":1,"message":"117","line":83,"column":31,"nodeType":"101","messageId":"102","endLine":83,"endColumn":33},{"ruleId":"99","severity":1,"message":"117","line":99,"column":33,"nodeType":"101","messageId":"102","endLine":99,"endColumn":35},"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'opt'. Either include it or remove the dependency array.","ArrayExpression",["135"],"no-unused-vars","'CardBlock' is defined but never used.","Identifier","unusedVar","'Label' is defined but never used.","'AvGroup' is defined but never used.","'AvInput' is defined but never used.","'AvFeedback' is defined but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["136"],"Expected '===' and instead saw '=='.","no-native-reassign",["137"],"no-negated-in-lhs",["138"],"'Badge' is defined but never used.",["137"],["138"],"React Hook useEffect has missing dependencies: 'cmpCd', 'findEmpByCmpCd', and 'setValue'. Either include them or remove the dependency array.",["139"],["137"],["138"],"'Row' is defined but never used.","React Hook useEffect has missing dependencies: 'cmpCd' and 'findEmpByCmpCd'. Either include them or remove the dependency array.",["140"],["137"],["138"],["141"],{"desc":"142","fix":"143"},{"desc":"144","fix":"145"},"no-global-assign","no-unsafe-negation",{"desc":"146","fix":"147"},{"desc":"148","fix":"149"},{"desc":"144","fix":"150"},"Update the dependencies array to be: [opt]",{"range":"151","text":"152"},"Update the dependencies array to be: [props]",{"range":"153","text":"154"},"Update the dependencies array to be: [cmpCd, findEmpByCmpCd, setValue]",{"range":"155","text":"156"},"Update the dependencies array to be: [cmpCd, findEmpByCmpCd]",{"range":"157","text":"158"},{"range":"159","text":"154"},[688,690],"[opt]",[1023,1025],"[props]",[2010,2012],"[cmpCd, findEmpByCmpCd, setValue]",[1199,1201],"[cmpCd, findEmpByCmpCd]",[1206,1208]]