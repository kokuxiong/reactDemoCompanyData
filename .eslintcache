[{"E:\\companyERP\\src\\hooks\\useCommon.js":"1","E:\\companyERP\\src\\components\\Login.js":"2","E:\\companyERP\\src\\components\\MyApp.js":"3","E:\\companyERP\\src\\components\\NavBar.js":"4","E:\\companyERP\\src\\components\\List.js":"5","E:\\companyERP\\src\\components\\RegisterUpdate.js":"6","E:\\companyERP\\src\\index.js":"7","E:\\companyERP\\src\\components\\Infomation.js":"8","E:\\companyERP\\src\\services\\util.js":"9","E:\\companyERP\\src\\App.js":"10","E:\\companyERP\\src\\services\\empinfoDAO.js":"11","E:\\companyERP\\src\\services\\loginuserDAO.js":"12","E:\\companyERP\\src\\components\\LoginUserRegister.js":"13","E:\\companyERP\\src\\i18n.js":"14","E:\\companyERP\\src\\services\\countryDAO.js":"15"},{"size":4471,"mtime":1608981957165,"results":"16","hashOfConfig":"17"},{"size":7727,"mtime":1609325657717,"results":"18","hashOfConfig":"17"},{"size":8314,"mtime":1609640039691,"results":"19","hashOfConfig":"17"},{"size":1552,"mtime":1609393304387,"results":"20","hashOfConfig":"17"},{"size":4988,"mtime":1609632369272,"results":"21","hashOfConfig":"17"},{"size":14229,"mtime":1609639876426,"results":"22","hashOfConfig":"17"},{"size":210,"mtime":1609243384606,"results":"23","hashOfConfig":"17"},{"size":3895,"mtime":1609392822868,"results":"24","hashOfConfig":"17"},{"size":943,"mtime":1608890053650,"results":"25","hashOfConfig":"17"},{"size":304,"mtime":1609635502018,"results":"26","hashOfConfig":"17"},{"size":1896,"mtime":1608890040041,"results":"27","hashOfConfig":"17"},{"size":2085,"mtime":1608890047156,"results":"28","hashOfConfig":"17"},{"size":7250,"mtime":1609325749215,"results":"29","hashOfConfig":"17"},{"size":811,"mtime":1609243369031,"results":"30","hashOfConfig":"17"},{"size":353,"mtime":1609324266788,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"35"},"18360cf",{"filePath":"36","messages":"37","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"39"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"50"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\companyERP\\src\\hooks\\useCommon.js",["69","70"],"import {useEffect, useState} from 'react'\r\nimport {insertEmpinfo, findAllEmpinfo, findByCmpCd, updateEmpinfo, deleteByCmpCd } from '../services/empinfoDAO'\r\nimport { insertLoginuser, findByAccId } from '../services/loginuserDAO'\r\n\r\nexport default　function useCommon(opt){\r\n\r\n    //社員情報リスト\r\n    const [emplist, setEmplist] = useState([])\r\n\r\n    //初期化処理\r\n    useEffect(() => {\r\n        //すべての社員情報を検索する\r\n        if(opt != false){ //optがfalseの場合、社員情報検索しない、じゃないとuseCommonを呼び出すたびに検索処理が実行される\r\n            findAllEmpinfo((data) => {\r\n                //検索成功の場合、stateを更新\r\n                setEmplist(data)\r\n                //テスト用\r\n                console.log(data)\r\n            })\r\n        }\r\n    },[]) //一回のみ実行するため、第二パラメータに[]を渡す\r\n\r\n    //社員情報全量検索\r\n    function findAllEmp() {\r\n        findAllEmpinfo((data) => {\r\n            //検索成功の場合、stateを更新\r\n            setEmplist(data)\r\n        })\r\n    }\r\n\r\n    //社員情報新規登録\r\n    function insertEmp(obj, callback){\r\n        //実際の登録処理\r\n        insertEmpinfo(obj, ()=>{\r\n            //登録でき次第、すべてのレコードを再検索する\r\n            findAllEmpinfo((data) => {\r\n                //state更新\r\n                setEmplist(data)\r\n                //callback呼び出す\r\n                callback()\r\n            })\r\n        })\r\n    }\r\n\r\n    //社員cmpCdにより、社員情報を検索する\r\n    function findEmpByCmpCd(cmpCd, callback){\r\n        //実際の検索処理\r\n        findByCmpCd(cmpCd, (data)=>{\r\n            //検索結果をcallbackとして返却\r\n            callback(data)\r\n        })\r\n    }\r\n\r\n    //指定された社員情報（obj）を更新する \r\n    function updateEmp(obj, callback){\r\n        //実際の更新処理\r\n        updateEmpinfo(obj, ()=>{\r\n            //すべてのレコードを検索する\r\n            findAllEmpinfo((data) => {\r\n                //state更新\r\n                setEmplist(data)\r\n                //callback呼び出す\r\n                callback()\r\n            })\r\n        })\r\n    }\r\n\r\n    //指定された社員情報を削除する\r\n    function deleteEmp(obj){\r\n        //実際の削除処理\r\n        deleteByCmpCd(obj, ()=>{\r\n            //すべてのレコードを検索する\r\n            findAllEmpinfo((data) => {\r\n                //state更新\r\n                setEmplist(data)\r\n            })\r\n        })\r\n    }\r\n\r\n    //社員番号すでに存在してるかをチェックする\r\n    function doCheckDoubleEmp(cmpCd) {\r\n        return new Promise((resolve, reject) => {\r\n            console.log(\"doCheckDoubleEmp\")\r\n            //実際の検索処理\r\n            findByCmpCd(cmpCd, (data)=>{\r\n                console.log(\"data.name\" + data.name)\r\n                //検索結果返却\r\n                data.name ? resolve(true) : resolve(false)\r\n            })\r\n        })\r\n        \r\n    }\r\n\r\n    //ログインユーザのaccountIdにより、ログインユーザを検索する\r\n    //ログイン処理ユーザチェック用\r\n    function findLoginuserByAccId(accId, callback) {\r\n        findByAccId(accId, (data) => {\r\n            //検索結果をcallbackとして返却\r\n            callback(data)\r\n        })\r\n    }\r\n\r\n    //ログインユーザ新規登録処理\r\n    //insert loginuser\r\n    function loginUserRegister(obj, callback) {\r\n        insertLoginuser(obj,() => {\r\n            callback()\r\n        })\r\n    }\r\n    \r\n    return { \r\n        emplist,                  //社員情報リスト\r\n        setEmplist,               //社員情報リストをstateへ更新\r\n        findAllEmp,               //すべての社員情報を検索する\r\n        insertEmp,                //社員を新規登録する\r\n        findEmpByCmpCd,           //社員コードにより、社員情報を検索する\r\n        updateEmp,                //社員情報を更新する\r\n        deleteEmp,                //社員を削除する\r\n        doCheckDoubleEmp,         //新規登録したい社員コードが既に存在しているかをチェック処理\r\n        loginUserRegister,        //ログインユーザを新規登録したい\r\n        findLoginuserByAccId      //ログインユーザＩＤにより、ログインユーザを検索する \r\n    }\r\n}",["71","72"],"E:\\companyERP\\src\\components\\Login.js",["73","74","75","76"],"import { useState } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { Button, Container } from 'reactstrap'\r\nimport useCommon from '../hooks/useCommon'\r\nimport { AvForm, AvField,} from 'availity-reactstrap-validation';\r\nimport { doCheck6LetterOrNum } from '../services/util'\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nvar debounce = require('lodash.debounce')\r\nvar timeout = null  //accountId利用\r\nvar timeout2 = null //password利用\r\n\r\n/** TODO\r\n *      メールアドレスチェック処理(ログインＩＤをメールのみにしたくないので、一旦保留)\r\n * \r\n */\r\n\r\nexport default function Login(props){\r\n\r\n    //hitoryを利用し、画面へ遷移する\r\n    let history = useHistory()\r\n    //画面で入力したＩＤとパスワードstate\r\n    const [accountId, setAccountId] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    //ログインユーザを検索処理\r\n    const { findLoginuserByAccId } = useCommon(false)\r\n    //i18n処理\r\n    const { t, i18n } = useTranslation();\r\n\r\n    //画面で入力したＩＤを随時stateへ反映\r\n    function updateAccountId(e){\r\n        setAccountId(e.target.value)\r\n    }\r\n    //画面で入力したパスワードを随時stateへ反映\r\n    function updatePassword(e){\r\n        setPassword(e.target.value)\r\n    }\r\n    //ログイン処理\r\n    function doLogin(){\r\n        //ＩＤ、パスワード⇒どちらか未入力の場合、なにもしない\r\n        if(!accountId || !password){\r\n            alert('入力ミスあり')\r\n            return\r\n        }\r\n        //ログインユーザ情報を検索処理\r\n        findLoginuserByAccId(accountId, (data) => {\r\n            //ＩＤとパスワード両方一致の場合、ログイン成功\r\n            if(data.accountId === accountId && data.password === password){\r\n                //state更新\r\n                props.doLogin(true)\r\n                //社員リストへ遷移\r\n                history.push('/list')\r\n            }else{\r\n                //state更新\r\n                alert(\"パスワード不正です。\")\r\n                props.doLogin(false)\r\n            }\r\n        })\r\n    }\r\n\r\n    //async validation use availity reactstrap validation\r\n    const accountIdDoubleCheck = debounce((value, ctx, input, cb) => {\r\n        //-------------------------------------------debounce------------------------\r\n        clearTimeout(timeout)\r\n        timeout = setTimeout(() => {\r\n            //ログインユーザ情報を検索処理\r\n            if(accountId){\r\n                //TODO email check\r\n                //ログインユーザ情報を検索処理\r\n                findLoginuserByAccId(accountId, (data) => {\r\n                    //正常の場合、trueを返却する\r\n                    if(data.accountId == accountId){\r\n                        cb(true)\r\n                    }else{\r\n                        //ユーザＩＤ存在しない場合、エラーメッセージを返却すると、エラーメッセージのカスタマイズはできる\r\n                        cb(t('login.user-error-noacc'))\r\n                    }\r\n                })\r\n            }else{\r\n                //TODO 异步检查的时候，暂时把必须入力的检查也写在这，是否可以同时使用同步检查，待调查\r\n                //エラーの場合、エラーメッセージを返却すると、エラーメッセージのカスタマイズはできる\r\n                cb(t('login.user-error-required'))\r\n            }\r\n        }, 500)\r\n        //-------------------------------------------------------------------------------\r\n    }, 100)\r\n\r\n    //async validation use availity reactstrap validation\r\n    const passwordCheck = debounce((value, ctx, input, cb) => {\r\n        //-------------------------------------------debounce------------------------\r\n        clearTimeout(timeout2)\r\n        timeout2 = setTimeout(() => {\r\n            //ログインユーザ情報を検索処理\r\n            if(password){\r\n                //６桁英数字チェック\r\n                if(doCheck6LetterOrNum(password)){\r\n                    //パスワード是非チェック\r\n                    findLoginuserByAccId(accountId, (data) => {\r\n                        //ユーザＩＤ存在している場合\r\n                        if(data.accountId == accountId){\r\n                            //正常の場合、trueを返却する\r\n                            if(data.password == password){\r\n                                cb(true)\r\n                            }else{\r\n                                //ユーザＩＤ存在、かつパスワード不正\r\n                                cb(t('login.password-error-noright'))\r\n                            }\r\n                        }else{\r\n                            //ユーザＩＤ存在してない場合、エラーメッセージを返却\r\n                            cb(t('login.password-error-nouser'))\r\n                        }\r\n                    })\r\n                }else{\r\n                    //６桁英数字以外の場合、エラーメッセージを返却\r\n                    cb(t('login.password-error-6char'))\r\n                }\r\n                \r\n            }else{\r\n                //TODO 异步检查的时候，暂时把必须入力的检查也写在这，是否可以同时使用同步检查，待调查\r\n                //エラーの場合、エラーメッセージを返却すると、エラーメッセージのカスタマイズはできる\r\n                cb(t('login.password-error-required'))\r\n            }\r\n        }, 500)\r\n        //-------------------------------------------------------------------------------\r\n    }, 100)\r\n\r\n    //確定ボタンアクティブチェック\r\n    function doActive() {\r\n        //どちらか未入力の場合、非アクティブにする、それ以外はアクティブにする\r\n        if(accountId && password){\r\n            return false\r\n        }else{\r\n            return true\r\n        }\r\n    }\r\n\r\n    return(\r\n    <div>\r\n        <Container style={{paddingLeft:280,paddingRight:220}}>\r\n            {/* <h5>社員管理システムログイン画面</h5><br/><br/> */}\r\n            <h5>{t('login.title')}</h5><br/><br/>\r\n            <AvForm>\r\n                {/* TODO userID要检查是否存在，所以使用了异步检查，但好像不能同时使用同步检查，比如必须入力，这个待调查 */}\r\n                <AvField type=\"text\" id=\"username\" name=\"username\" label={t('login.id')}\r\n                    onChange={updateAccountId} placeholder={t('login.id-placeholder')} validate={{\r\n                        // required: true,\r\n                        // required: {value: true, errorMessage: 'ユーザＩＤは必須入力です2。'},\r\n                        async: accountIdDoubleCheck //★异步验证和同步验证好像不能同时进行，待调查★\r\n                    }} />\r\n                <AvField type=\"password\" id=\"password\" name=\"password\" label={t('login.password')}\r\n                    onChange={updatePassword} placeholder={t('login.password-placeholder')} validate={{\r\n                        // required: {value: true, errorMessage: 'パスワードは必須入力です。'},\r\n                        // pattern: {value: '^[a-zA-Z0-9]{6}$', errorMessage: '６桁英数字を入力してください。'}\r\n                        async: passwordCheck //★异步验证和同步验证好像不能同时进行，待调查★\r\n                    }} />\r\n                <Button color=\"primary\" onClick={doLogin} disabled={doActive()} >{t('login.login')}</Button>\r\n            </AvForm>\r\n        </Container>\r\n    </div>\r\n    )\r\n\r\n}",["77","78"],"E:\\companyERP\\src\\components\\MyApp.js",["79","80","81","82"],"E:\\companyERP\\src\\components\\NavBar.js",[],"E:\\companyERP\\src\\components\\List.js",["83","84","85"],"E:\\companyERP\\src\\components\\RegisterUpdate.js",["86","87","88","89","90","91","92"],"E:\\companyERP\\src\\index.js",[],["93","94"],"E:\\companyERP\\src\\components\\Infomation.js",["95","96"],"E:\\companyERP\\src\\services\\util.js",["97"],"//国マスタ\r\nconst country = [\r\n    {cd: '001', cName: '中国'},\r\n    {cd: '002', cName: '日本'},\r\n    {cd: '003', cName: '韓国'},\r\n]\r\n\r\n//国のcountryCdにより、国名を検索し返却する\r\nfunction getCountryName(countryCd) {\r\n    //検索処理\r\n    let countryTmp = country.find((element) => element.cd == countryCd)\r\n    //検索結果がある場合、国名を返却、それ以外は不明を返却\r\n    return countryTmp ? countryTmp.cName : '不明'\r\n}\r\n\r\n//6桁英数字チェック\r\nfunction doCheck6LetterOrNum(target) {\r\n    var myExpress = \"^[0-9a-zA-Z]{6}$\"; \r\n    var re = new RegExp(myExpress); \r\n    console.log(\"re test\" + re.test(target))\r\n    if (re.test(target)) { \r\n       return true\r\n    }else{ \r\n      return false\r\n    }\r\n}\r\n\r\n//export\r\nexport { \r\n    getCountryName,           //国のcountryCdにより、国名を検索し返却する\r\n    doCheck6LetterOrNum       //6桁英数字チェック \r\n}","E:\\companyERP\\src\\App.js",[],"E:\\companyERP\\src\\services\\empinfoDAO.js",[],"E:\\companyERP\\src\\services\\loginuserDAO.js",[],"E:\\companyERP\\src\\components\\LoginUserRegister.js",["98","99"],"import { useState } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { Button, Container, Form, FormGroup, Input, Label, Col, Alert } from 'reactstrap'\r\nimport useCommon from '../hooks/useCommon'\r\nimport { doCheck6LetterOrNum } from '../services/util'\r\nimport { useTranslation } from 'react-i18next';\r\n\r\n/**\r\n * 当該画面のチェック処理は手動で実現している。勉強になるため、一旦このままにする。\r\n */\r\nexport default function LoginUserRegister(props){\r\n\r\n    //historyを利用し画面遷移する\r\n    let history = useHistory()\r\n    //画面で入力したＩＤとパスワードstate\r\n    const [accountId, setAccountId] = useState('')\r\n    const [password, setPassword] = useState('')\r\n    //画面へエラーメッセージを出すフラグ\r\n    const [visible, setVisible] = useState(false) //ＩＤ必須入力フラグ\r\n    const [visible2, setVisible2] = useState(false) //パスワードに不正ありフラグ\r\n    const [visible2sub, setVisible2sub] = useState(false) //パスワードは未入力かor６桁英数字以外かフラグ\r\n    const [visible3, setVisible3] = useState(false) //ＩＤ存在フラグ\r\n    const [visible4, setVisible4] = useState(false) //登録成功、画面遷移提示フラグ\r\n    const [time3, setTime3] = useState(3) //登録成功の場合、3秒後画面をログインへ遷移する\r\n    //ログインユーザ登録処理と検索処理\r\n    const { loginUserRegister, findLoginuserByAccId } = useCommon(false)\r\n    //i18n処理\r\n    const { t } = useTranslation();\r\n\r\n    //画面で入力したＩＤを随時stateへ\r\n    function updateAccountId(e){\r\n        setAccountId(e.target.value)\r\n        //ＩＤを弄ると、エラーメッセージを消す\r\n        if(visible){\r\n            setVisible(false)\r\n            setVisible2sub(false)\r\n        }\r\n        //ＩＤを弄ると、エラーメッセージを消す\r\n        if(visible3){\r\n            setVisible3(false)\r\n        }\r\n    }\r\n    //画面で入力したパスワードを随時stateへ\r\n    function updatePassword(e){\r\n        setPassword(e.target.value)\r\n        //パスワードを弄ると、エラーメッセージを消す\r\n        if(visible2){\r\n            setVisible2(false)\r\n            setVisible2sub(false)\r\n        }\r\n        //パスワードを弄ると、エラーメッセージを消す\r\n        if(visible3){\r\n            setVisible3(false)\r\n        }\r\n    }\r\n\r\n    //登録処理\r\n    function doRegister(){\r\n        //ＩＤ未入力の場合、エラーメッセージ出す\r\n        if(!accountId){\r\n            // alert(\"accountID must be inputed\")\r\n            setVisible(true)\r\n        }\r\n        //パスワード未入力の場合、エラーメッセージ出す\r\n        if(!password){\r\n            // alert(\"password must be inputed\")\r\n            setVisible2(true)\r\n        }\r\n        //どちらか未入力の場合、なにもしない\r\n        if(!accountId || !password){\r\n            // alert('未入力項目がありますので、ご確認ください。')\r\n            return\r\n        }\r\n        //パスワード６桁英数字チェック、６桁英数字以外の場合、エラーメッセージ出す\r\n        if(!doCheck6LetterOrNum(password)){\r\n            setVisible2(true)\r\n            setVisible2sub(true)\r\n            return\r\n        }\r\n        //ＩＤが重複してるかチェック\r\n        findLoginuserByAccId(accountId, (data) => {\r\n            //ＩＤが重複したら、エラーメッセージ出す\r\n            if(data.accountId == accountId){\r\n                // alert(\"double user\")\r\n                setVisible3(true)\r\n            }else{\r\n                //重複してないなら、登録する\r\n                let tempObj = {}\r\n                tempObj.accountId = accountId\r\n                tempObj.password = password\r\n                loginUserRegister(tempObj, () => {\r\n                    // history.push('/')\r\n                    // alert(\"登録成功です。３秒後ログイン画面へ自動遷移いたします。\")\r\n                    //３秒後遷移するよ　をユーザへ提示するメッセージ出す\r\n                    setVisible4(true)\r\n                    let time = 3\r\n                    let timeCount3 = setInterval(() => {\r\n                        setTime3(time--)\r\n                        if(time == 0){\r\n                            setTimeout(() => {\r\n                                history.push('/')\r\n                                clearInterval(timeCount3)\r\n                            }, 1000);\r\n                        }\r\n                    }, 1000);\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    return(\r\n    <div style={{textAlign:'center'}}>\r\n        <Container>\r\n            <h5 style={{paddingLeft:'auto',paddingRight:270}}>{t('register.title')}</h5><br/><br/>\r\n            <Form >\r\n                <FormGroup row style={{justifyContent: 'center'}}>\r\n                    <Label for=\"username\" sm={2}>{t('register.id')}</Label>\r\n                    <Col sm={4}>\r\n                        <Input type=\"text\" name=\"username\" id=\"username\" \r\n                            onChange={updateAccountId} placeholder={t('register.id-placeholder')}/>\r\n                    </Col>\r\n                    <Col sm={4}>\r\n                        <Alert color=\"danger\" isOpen={visible} style={{height:38,paddingTop:5,paddingBottom:0,marginBottom:0}}>\r\n                            {t('login.user-error-required')}\r\n                        </Alert>\r\n                    </Col>\r\n                </FormGroup>\r\n                <FormGroup row style={{justifyContent: 'center'}}>\r\n                    <Label for=\"password\" sm={2}>{t('register.password')}</Label>\r\n                    <Col sm={4}>\r\n                        <Input type=\"password\" name=\"password\" id=\"password\" \r\n                            onChange={updatePassword} placeholder={t('register.password-placeholder')}/>\r\n                    </Col>\r\n                    <Col sm={4}>\r\n                        <Alert color=\"danger\" isOpen={visible2} style={{height:38,paddingTop:5,paddingBottom:0,marginBottom:0}}>\r\n                            {visible2sub ? t('login.password-error-6char') : t('login.password-error-required')}\r\n                        </Alert>\r\n                    </Col>\r\n                </FormGroup> \r\n                <FormGroup row style={{justifyContent: 'center'}}>\r\n                    <Col sm={6}>\r\n                        <Alert color=\"danger\" isOpen={visible3} style={{width:350}}>\r\n                            ユーザＩＤは既に存在しています。\r\n                        </Alert>\r\n                        <Alert color=\"danger\" isOpen={visible4} style={{width:350}}>\r\n                            {`${t('register.success1')}${time3}${t('register.success2')}`}\r\n                        </Alert>\r\n                    </Col>\r\n                </FormGroup> \r\n                <br/>\r\n                <FormGroup style={{justifyContent: 'center'}}>\r\n                    <Col sm={10}><Button color=\"primary\" onClick={doRegister} >{t('register.login')}</Button></Col>\r\n                </FormGroup>\r\n            </Form>\r\n        </Container>\r\n    </div>\r\n    )\r\n\r\n}","E:\\companyERP\\src\\i18n.js",[],"E:\\companyERP\\src\\services\\countryDAO.js",[],{"ruleId":"100","severity":1,"message":"101","line":13,"column":16,"nodeType":"102","messageId":"103","endLine":13,"endColumn":18},{"ruleId":"104","severity":1,"message":"105","line":21,"column":7,"nodeType":"106","endLine":21,"endColumn":9,"suggestions":"107"},{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","replacedBy":"111"},{"ruleId":"112","severity":1,"message":"113","line":28,"column":16,"nodeType":"114","messageId":"115","endLine":28,"endColumn":20},{"ruleId":"100","severity":1,"message":"116","line":72,"column":39,"nodeType":"102","messageId":"103","endLine":72,"endColumn":41},{"ruleId":"100","severity":1,"message":"116","line":100,"column":43,"nodeType":"102","messageId":"103","endLine":100,"endColumn":45},{"ruleId":"100","severity":1,"message":"116","line":102,"column":46,"nodeType":"102","messageId":"103","endLine":102,"endColumn":48},{"ruleId":"108","replacedBy":"117"},{"ruleId":"110","replacedBy":"118"},{"ruleId":"100","severity":1,"message":"116","line":124,"column":22,"nodeType":"102","messageId":"103","endLine":124,"endColumn":24},{"ruleId":"100","severity":1,"message":"116","line":126,"column":25,"nodeType":"102","messageId":"103","endLine":126,"endColumn":27},{"ruleId":"100","severity":1,"message":"116","line":133,"column":22,"nodeType":"102","messageId":"103","endLine":133,"endColumn":24},{"ruleId":"100","severity":1,"message":"116","line":135,"column":25,"nodeType":"102","messageId":"103","endLine":135,"endColumn":27},{"ruleId":"112","severity":1,"message":"119","line":2,"column":94,"nodeType":"114","messageId":"115","endLine":2,"endColumn":99},{"ruleId":"104","severity":1,"message":"120","line":21,"column":7,"nodeType":"106","endLine":21,"endColumn":9,"suggestions":"121"},{"ruleId":"100","severity":1,"message":"116","line":55,"column":36,"nodeType":"102","messageId":"103","endLine":55,"endColumn":38},{"ruleId":"112","severity":1,"message":"122","line":3,"column":60,"nodeType":"114","messageId":"115","endLine":3,"endColumn":63},{"ruleId":"112","severity":1,"message":"123","line":6,"column":26,"nodeType":"114","messageId":"115","endLine":6,"endColumn":41},{"ruleId":"112","severity":1,"message":"124","line":6,"column":43,"nodeType":"114","messageId":"115","endLine":6,"endColumn":48},{"ruleId":"104","severity":1,"message":"125","line":88,"column":7,"nodeType":"106","endLine":88,"endColumn":9,"suggestions":"126"},{"ruleId":"100","severity":1,"message":"116","line":128,"column":30,"nodeType":"102","messageId":"103","endLine":128,"endColumn":32},{"ruleId":"100","severity":1,"message":"116","line":241,"column":75,"nodeType":"102","messageId":"103","endLine":241,"endColumn":77},{"ruleId":"100","severity":1,"message":"116","line":247,"column":75,"nodeType":"102","messageId":"103","endLine":247,"endColumn":77},{"ruleId":"108","replacedBy":"127"},{"ruleId":"110","replacedBy":"128"},{"ruleId":"104","severity":1,"message":"129","line":39,"column":7,"nodeType":"106","endLine":39,"endColumn":9,"suggestions":"130"},{"ruleId":"100","severity":1,"message":"116","line":61,"column":72,"nodeType":"102","messageId":"103","endLine":61,"endColumn":74},{"ruleId":"100","severity":1,"message":"116","line":11,"column":59,"nodeType":"102","messageId":"103","endLine":11,"endColumn":61},{"ruleId":"100","severity":1,"message":"116","line":83,"column":31,"nodeType":"102","messageId":"103","endLine":83,"endColumn":33},{"ruleId":"100","severity":1,"message":"116","line":99,"column":33,"nodeType":"102","messageId":"103","endLine":99,"endColumn":35},"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'opt'. Either include it or remove the dependency array.","ArrayExpression",["131"],"no-native-reassign",["132"],"no-negated-in-lhs",["133"],"no-unused-vars","'i18n' is assigned a value but never used.","Identifier","unusedVar","Expected '===' and instead saw '=='.",["132"],["133"],"'Badge' is defined but never used.","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["134"],"'Col' is defined but never used.","'withTranslation' is defined but never used.","'Trans' is defined but never used.","React Hook useEffect has missing dependencies: 'cmpCd', 'findEmpByCmpCd', 'props', and 'setValue'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["135"],["132"],["133"],"React Hook useEffect has missing dependencies: 'cmpCd', 'findEmpByCmpCd', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["136"],{"desc":"137","fix":"138"},"no-global-assign","no-unsafe-negation",{"desc":"139","fix":"140"},{"desc":"141","fix":"142"},{"desc":"143","fix":"144"},"Update the dependencies array to be: [opt]",{"range":"145","text":"146"},"Update the dependencies array to be: [props]",{"range":"147","text":"148"},"Update the dependencies array to be: [cmpCd, findEmpByCmpCd, props, setValue]",{"range":"149","text":"150"},"Update the dependencies array to be: [cmpCd, findEmpByCmpCd, props]",{"range":"151","text":"152"},[688,690],"[opt]",[688,690],"[props]",[2852,2854],"[cmpCd, findEmpByCmpCd, props, setValue]",[1359,1361],"[cmpCd, findEmpByCmpCd, props]"]